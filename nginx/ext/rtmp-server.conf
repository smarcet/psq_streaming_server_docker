rtmp {
        server {
            listen 1935;

	        chunk_size 4096;
	        publish_time_fix off;
            ping 10s;
	        buflen 5s;
            notify_method post;

	        application live {
		        live on;
		        # wait_key on;
		        # No RTMP playback
		        # deny play all;
		        # allow play 127.0.0.1;

		        # Push this stream to the local HLS packaging application
		        push rtmp://127.0.0.1:1935/hls;
                # Push this stream to the local DASH packaging application
	            push rtmp://127.0.0.1:1935/dash;

#               exec /usr/bin/ffmpeg -i rtmp://127.0.0.1:1935/live/$name
#			    -threads 6 -c:v libx264 -preset ultrafast -profile:v baseline -level 3.0 -tune zerolatency -vsync cfr -s 1024x576 -b:v 1024K -bufsize 1024k -f flv rtmp://127.0.0.1:1935/dash/$name_hi
#				-threads 6 -c:v libx264 -preset ultrafast -profile:v baseline -level 3.0 -tune zerolatency -vsync cfr -s 640x360 -b:v 832K -bufsize 832k -f flv rtmp://127.0.0.1:1935/dash/$name_med
#				-threads 6  -c:v libx264 -preset ultrafast -profile:v baseline -level 3.0 -tune zerolatency -vsync cfr -s 320x180 -b:v 256K -bufsize 256k -f flv rtmp://127.0.0.1:1935/dash/$name_low;

#	            exec /usr/bin/ffmpeg -i rtmp://127.0.0.1:1935/live/$name
#               -threads 6 -c:v libx264 -preset ultrafast -profile:v baseline -level 3.0 -tune zerolatency -vsync cfr -s 1024x576 -b:v 1024K -bufsize 1024k -f flv rtmp://127.0.0.1:1935/hls/$name_hi
#               -threads 6 -c:v libx264 -preset ultrafast -profile:v baseline -level 3.0 -tune zerolatency -vsync cfr -s 640x360 -b:v 832K -bufsize 832k -f flv rtmp://127.0.0.1:1935/hls/$name_med
#               -threads 6 -c:v libx264 -preset ultrafast -profile:v baseline -level 3.0 -tune zerolatency -vsync cfr -s 320x180 -b:v 256K -bufsize 256k -f flv rtmp://127.0.0.1:1935/hls/$name_low;

		        # HTTP callback when a stream starts publishing
		        # Should return 2xx to allow, 3xx to redirect, anything else to deny.
		        on_publish http://@PSQ_API_HOST/devices/streaming/publish/start;
		        # Called when a stream stops publishing.  Response is ignored.
		        on_publish_done http://@PSQ_API_HOST/devices/streaming/publish/finish;
	        }

	        application hls {
	            live on;
                record off;
                # Package this stream as HLS
                hls on;
                # hls_continuous off;
                # hls_fragment_slicing aligned;
                hls_fragment 3s;
                hls_path /tmp/hls;
                hls_type live;
                hls_nested on;
                # No RTMP playback
                deny play all;
                # Only allow publishing from localhost
                allow publish 127.0.0.1;
                deny publish all;
                # adaptative HLS
                # hls_variant _low BANDWIDTH=160000;
                # hls_variant _med BANDWIDTH=320000;
                # hls_variant _hi  BANDWIDTH=640000;
            }

            application dash {
                live on;
	            record off;
	            # dash
	            dash on;
                dash_nested on;
	            # dash_repetition on;
                dash_path /tmp/dash;
                dash_fragment 4;
                dash_playlist_length 120;
                dash_cleanup on;
                dash_clock_compensation http_head;
                dash_clock_helper_uri http://@SERVER_NAME/time;
                # No RTMP playback
                deny play all;
                # Only allow publishing from localhost
                allow publish 127.0.0.1;
                deny publish all;
                # adaptative DASH
                # dash_variant _low bandwidth="256000" width="320" height="180";
                # dash_variant _med bandwidth="832000" width="640" height="360";
                # dash_variant _hi bandwidth="1024000" width="1024" height="576" max;
          }
     }
}
